# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python CI/CD

on: push
  # schedule:
  #   # every day at 6am
  #   - cron: '0 6 * * *'

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10"]
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        sudo apt-get install -y xvfb
        python -m pip install --upgrade pip setuptools wheel
        python -m pip install flake8 pytest cyclonedx-bom pyinstaller pdoc bandit pylint coverage
        pip install -r requirements.txt
        pip freeze > requirements-frozen.txt

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        # flake8 . --count --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        git rm --ignore-unmatch reports/flake8-issues.txt
        flake8 web_scraper_all.py --count --show-source --statistics --output-file=./reports/flake8-issues.txt --exit-zero --max-complexity 10 --max-line-length 127

    - name: Test for security vulnerabilities with bandit
      run: |
        git rm --ignore-unmatch reports/bandit-issues.json
        bandit web_scraper_all.py -f json -o reports/bandit-issues.json -v --exit-zero

    - name: Lint with Pylint
      run: |
        git rm --ignore-unmatch reports/pylint-issues.json
        pylint web_scraper_all.py --reports=y --output-format=json:reports/pylint-issues.json,colorized --exit-zero

    - name: Test with pytest
      run: |
        git rm --ignore-unmatch reports/coverage.xml
        coverage run -m pytest && coverage xml -o reports/coverage.xml

    - name: Generate docs
      run: pdoc ./web_scraper_all.py -o ./docs

    - name: SonarCloud Scan
      # You may pin to the exact commit or the version.
      # uses: SonarSource/sonarcloud-github-action@de2e56b42aa84d0b1c5b622644ac17e505c9a049
      uses: SonarSource/sonarcloud-github-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONARCLOUD_TOKEN }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        # Additional arguments to the sonarcloud scanner
        args: # optional
        # Set the sonar.projectBaseDir analysis property
        projectBaseDir: # optional, default is .
    - name: Run codacy-coverage-reporter
      uses: codacy/codacy-coverage-reporter-action@v1
      with:
        project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
        # or
        # api-token: ${{ secrets.CODACY_API_TOKEN }}
        coverage-reports: ./reports/coverage.xml

    - name: CycloneDX Python Generate SBOM
      run: |
        git rm --ignore-unmatch reports/sbom-report.json
        cyclonedx-bom -r -i requirements-frozen.txt --format json --schema-version 1.4 -o ./reports/sbom-report.json

    - name: Build Artifacts
      run: pyinstaller -wF web_scraper_all.py

    - name: Archive Artifacts - Docs
      uses: actions/upload-artifact@v3
      with:
        name: web-scraper-docs
        path: docs/*
        if-no-files-found: error

    - name: Archive Artifacts - SBOM, Coverage, Linting
      uses: actions/upload-artifact@v3
      with:
        name: web-scraper-reports
        path: | 
          reports/*
        if-no-files-found: error

    - name: Archive Artifacts - Executables
      uses: actions/upload-artifact@v3
      with:
        name: web-scraper-executable
        path: | 
          dist/*
        if-no-files-found: error

    #- name: Dependency Track Upload SBOM for Vulnerability Analysis and Visualization
    #  uses: DependencyTrack/gh-upload-sbom@v1.0.0
    #  with:
    #    serverhostname: ${{ secrets.DT_SERVER_IP }}
    #    port: '8081'
    #    apikey: ${{ secrets.DEPENDENCYTRACK_APIKEY }}
    #    projectname: 'web_scraper_all-${{github.ref_name}}'
    #    projectversion: '${{github.ref_name}}'
    #    autocreate: 'true'
    #    bomfilename: 'sbom-report.json'

    - name: debug
      run: |
        git status
        ls -lah .
        cd dist/
        ls -lah .
    - name: Git Pull & refresh index
      run: git pull
    - run: |
          if git diff-index --quiet HEAD --; then
            echo "IS_FILE_CHANGED=true" >> $GITHUB_ENV
          else
            echo "IS_FILE_CHANGED=false" >> $GITHUB_ENV
          fi
    - if: ${{ env.IS_FILE_CHANGED == true }}
      name: Commit & Push Artifacts to Repo
      uses: stefanzweifel/git-auto-commit-action@v4
      with:
        # Optional. Commit message for the created commit.
        # Defaults to "Apply automatic changes"
        commit_message: ${{ github.workflow }}, ${{ github.job }}-${{ github.run_number }} Commit & Push Artifacts

        # Optional glob pattern of files which should be added to the commit
        # Defaults to all (.)
        # See the `pathspec`-documentation for git
        # - https://git-scm.com/docs/git-add#Documentation/git-add.txt-ltpathspecgt82308203
        # - https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddefpathspecapathspec
        file_pattern: docs/* dist/* reports/*
