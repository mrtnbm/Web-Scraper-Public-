# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python package & analysis

on:
  push:
    branches: [ main, github-action-autobuild-test-python ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
  #  schedule:
  #    #0-59 0-23 1-31 1-12 0-6
  #    - cron: '0 23 * * 0'

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10"]
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8 pytest cyclonedx-bom pyinstaller pdoc bandit pylint coverage
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip freeze > requirements-frozen.txt

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        # flake8 . --count --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 web_scraper_all.py --count --show-source --statistics --output-file=./reports/flake8-issues.txt --exit-zero --max-complexity=10

    - name: Test for security vulnerabilities with bandit
      run: |
        bandit web_scraper_all.py -f json -o reports/bandit-issues.json -v --exit-zero

    - name: Lint with Pylint
      run: |
        pylint web_scraper_all.py --reports=y --output-format=json:./reports/pylint-issues.json,colorized --exit-zero

    - name: Test with pytest
      run: |
        coverage run -m pytest && coverage xml

    - name: Generate docs
      run: pdoc ./web_scraper_all.py -o ./docs

    - name: SonarCloud Scan
      # You may pin to the exact commit or the version.
      # uses: SonarSource/sonarcloud-github-action@de2e56b42aa84d0b1c5b622644ac17e505c9a049
      uses: SonarSource/sonarcloud-github-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONARCLOUD_TOKEN }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        # Additional arguments to the sonarcloud scanner
        args: # optional
        # Set the sonar.projectBaseDir analysis property
        projectBaseDir: # optional, default is .
    # - name: Run Codacy Analysis CLI
    #   uses: codacy/codacy-analysis-cli-action@master
    #   with:
    #     output: codacy-issues.sarif
    #     format: sarif
    #     directory: ${GITHUB_WORKSPACE}/web_scraper_all.py
    #     # Adjust severity of non-security issues
    #     gh-code-scanning-compat: true
    #     # Force 0 exit code to allow SARIF file generation
    #     # This will handover control about PR rejection to the GitHub side
    #     max-allowed-issues: 2147483647
    
    # # Upload the SARIF file generated in the previous step
    # - name: Upload SARIF codacy-issues file
    #   uses: github/codeql-action/upload-sarif@main
    #   with:
    #     sarif_file: codacy-issues.sarif
    # - name: Run codacy-coverage-reporter
    #   uses: codacy/codacy-coverage-reporter-action@v1
    #   with:
    #     project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
    #     # or
    #     # api-token: ${{ secrets.CODACY_API_TOKEN }}
    #     coverage-reports: coverage.xml

    - name: CycloneDX Python Generate SBOM
      run: cyclonedx-bom -r -i requirements-frozen.txt --format json --schema-version 1.4 -o ./reports/sbom-report.json

    - name: Build Artifacts
      run: pyinstaller -wF web_scraper_all.py

    - name: Archive Artifacts - Docs
      uses: actions/upload-artifact@v3
      with:
        name: web-scraper-docs
        path: docs/*
        if-no-files-found: error

    - name: Archive Artifacts - SBOM, Coverage, Linting
      uses: actions/upload-artifact@v3
      with:
        name: web-scraper-reports
        path: | 
          reports/*
        if-no-files-found: error

    - name: Archive Artifacts - Executables
      uses: actions/upload-artifact@v3
      with:
        name: web-scraper-executable
        path: | 
          dist/*.exe
        if-no-files-found: error
    #- name: Dependency Track Upload SBOM for Vulnerability Analysis and Visualization
    #  uses: DependencyTrack/gh-upload-sbom@v1.0.0
    #  with:
    #    serverhostname: ${{ secrets.DT_SERVER_IP }}
    #    port: '8081'
    #    apikey: ${{ secrets.DEPENDENCYTRACK_APIKEY }}
    #    projectname: 'web_scraper_all-${{github.ref_name}}'
    #    projectversion: '${{github.ref_name}}'
    #    autocreate: 'true'
    #    bomfilename: 'sbom-report.json'
    - name: debug
      run: ls -lah .
